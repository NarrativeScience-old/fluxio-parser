"""Contains the class that represents the AWS Step Functions Wait State"""
import ast
from typing import Dict

from fluxio_parser.exceptions import UnsupportedOperation
from fluxio_parser.states.base import State
from fluxio_parser.util import convert_input_data_ref


class WaitState(State):
    """Wait state

    A Wait state pauses the state machine for a certain number of seconds or until a
    future timestamp. Wait states are generated by calling ``wait`` in an .sfn file.

    The ``wait`` function accepts one of the following keyword arguments:
    * **seconds** -- integer number of seconds or a path to a number in the input data
    * **timestamp** -- ISO datetime string or a path to a datetime in the input data

    See: https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-wait-state.html

    For example::

        wait(seconds=10)

    resolves to::

        {
            "Type": "Wait",
            "Seconds": 10
        }
    """

    def to_dict(self) -> Dict:
        """Return a serialized representation of the Wait state."""
        data = {"Type": "Wait"}

        for keyword in self.ast_node.value.keywords:
            if keyword.arg == "seconds":
                if isinstance(keyword.value, ast.Num):
                    data["Seconds"] = keyword.value.n
                else:
                    data["SecondsPath"] = convert_input_data_ref(keyword.value)
            elif keyword.arg == "timestamp":
                if isinstance(keyword.value, ast.Str):
                    data["Timestamp"] = keyword.value.s
                else:
                    data["TimestampPath"] = convert_input_data_ref(keyword.value)
            else:
                raise UnsupportedOperation(
                    f"Valid keyword arguments include `seconds` and `timestamp` but `{keyword.arg}` was provided",
                    self.ast_node,
                )

        self._set_end_or_next(data)

        return data
